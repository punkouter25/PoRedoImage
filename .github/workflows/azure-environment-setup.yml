name: Azure Environment Setup

on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        options:
          - development
          - production
      region:
        type: choice
        description: 'Azure region to deploy to'
        required: true
        default: 'eastus'
        options:
          - eastus
          - eastus2
          - westus
          - westus2
          - centralus

jobs:
  setup-environment:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Login to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Set environment variables
      run: |
        echo "ENV_NAME=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
        echo "LOCATION=${{ github.event.inputs.region }}" >> $GITHUB_ENV
        echo "RESOURCE_GROUP=ImageGc-${{ github.event.inputs.environment }}" >> $GITHUB_ENV
        echo "APP_SERVICE_PLAN=imagegc-plan-${{ github.event.inputs.environment }}" >> $GITHUB_ENV
        echo "APP_NAME=imagegc-app-${{ github.event.inputs.environment }}" >> $GITHUB_ENV
        
    - name: Create Resource Group
      run: |
        exists=$(az group exists --name ${{ env.RESOURCE_GROUP }})
        if [ "$exists" = "false" ]; then
          az group create --name ${{ env.RESOURCE_GROUP }} --location ${{ env.LOCATION }}
          echo "Resource group created: ${{ env.RESOURCE_GROUP }}"
        else
          echo "Resource group already exists: ${{ env.RESOURCE_GROUP }}"
        fi
        
    - name: Create App Service Plan
      run: |
        exists=$(az appservice plan show --name ${{ env.APP_SERVICE_PLAN }} --resource-group ${{ env.RESOURCE_GROUP }} --query "name" --output tsv 2>/dev/null || echo "false")
        if [ "$exists" = "false" ]; then
          az appservice plan create --name ${{ env.APP_SERVICE_PLAN }} --resource-group ${{ env.RESOURCE_GROUP }} --sku P1V2 --is-linux
          echo "App Service Plan created: ${{ env.APP_SERVICE_PLAN }}"
        else
          echo "App Service Plan already exists: ${{ env.APP_SERVICE_PLAN }}"
        fi
        
    - name: Create Web App
      run: |
        exists=$(az webapp show --name ${{ env.APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query "name" --output tsv 2>/dev/null || echo "false")
        if [ "$exists" = "false" ]; then
          az webapp create --name ${{ env.APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --plan ${{ env.APP_SERVICE_PLAN }} --runtime "DOTNET|9.0"
          echo "Web App created: ${{ env.APP_NAME }}"
        else
          echo "Web App already exists: ${{ env.APP_NAME }}"
        fi
        
    - name: Create Computer Vision
      run: |
        exists=$(az cognitiveservices account show --name "imagegc-vision-${{ env.ENV_NAME }}" --resource-group ${{ env.RESOURCE_GROUP }} --query "name" --output tsv 2>/dev/null || echo "false")
        if [ "$exists" = "false" ]; then
          az cognitiveservices account create --name "imagegc-vision-${{ env.ENV_NAME }}" --resource-group ${{ env.RESOURCE_GROUP }} --kind ComputerVision --sku S1 --location ${{ env.LOCATION }}
          echo "Computer Vision created: imagegc-vision-${{ env.ENV_NAME }}"
        else
          echo "Computer Vision already exists: imagegc-vision-${{ env.ENV_NAME }}"
        fi
        
    - name: Get Computer Vision Key
      run: |
        VISION_KEY=$(az cognitiveservices account keys list --name "imagegc-vision-${{ env.ENV_NAME }}" --resource-group ${{ env.RESOURCE_GROUP }} --query "key1" --output tsv)
        VISION_ENDPOINT=$(az cognitiveservices account show --name "imagegc-vision-${{ env.ENV_NAME }}" --resource-group ${{ env.RESOURCE_GROUP }} --query "properties.endpoint" --output tsv)
        
        echo "VISION_KEY=$VISION_KEY" >> $GITHUB_ENV
        echo "VISION_ENDPOINT=$VISION_ENDPOINT" >> $GITHUB_ENV
        
    - name: Create Application Insights
      run: |
        exists=$(az monitor app-insights component show --app "imagegc-insights-${{ env.ENV_NAME }}" --resource-group ${{ env.RESOURCE_GROUP }} --query "name" --output tsv 2>/dev/null || echo "false")
        if [ "$exists" = "false" ]; then
          az monitor app-insights component create --app "imagegc-insights-${{ env.ENV_NAME }}" --resource-group ${{ env.RESOURCE_GROUP }} --location ${{ env.LOCATION }}
          echo "Application Insights created: imagegc-insights-${{ env.ENV_NAME }}"
        else
          echo "Application Insights already exists: imagegc-insights-${{ env.ENV_NAME }}"
        fi
        
    - name: Get Application Insights Connection String
      run: |
        APP_INSIGHTS_CONNECTION=$(az monitor app-insights component show --app "imagegc-insights-${{ env.ENV_NAME }}" --resource-group ${{ env.RESOURCE_GROUP }} --query "connectionString" --output tsv)
        echo "APP_INSIGHTS_CONNECTION=$APP_INSIGHTS_CONNECTION" >> $GITHUB_ENV
        
    - name: Add configuration settings to Web App
      run: |
        # Update app settings for the web app
        az webapp config appsettings set --name ${{ env.APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --settings \
          ComputerVision__Endpoint=${{ env.VISION_ENDPOINT }} \
          ComputerVision__Key=${{ secrets.VISION_KEY || env.VISION_KEY }} \
          ComputerVision__ApiVersion="2023-10-01" \
          OpenAI__Endpoint=${{ secrets.OPENAI_ENDPOINT }} \
          OpenAI__Key=${{ secrets.OPENAI_KEY }} \
          OpenAI__ChatCompletionsDeployment=${{ secrets.OPENAI_CHAT_MODEL || 'gpt-35-turbo' }} \
          OpenAI__ImageGenerationDeployment=${{ secrets.OPENAI_IMAGE_MODEL || 'dall-e-3' }} \
          OpenAI__FallbackChatModel=${{ secrets.OPENAI_FALLBACK_MODEL || 'gpt-35-turbo' }} \
          ApplicationInsights__ConnectionString=${{ env.APP_INSIGHTS_CONNECTION }}
          
    - name: Enable managed identity for Web App
      run: |
        az webapp identity assign --name ${{ env.APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }}
        
    - name: Update GitHub Action secrets
      run: |
        echo "::add-mask::${{ env.APP_NAME }}"
        echo "AZURE_WEBAPP_NAME=${{ env.APP_NAME }}" >> $GITHUB_ENV
        
    - name: Set GitHub Action Secrets
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh secret set AZURE_WEBAPP_NAME -b "${{ env.APP_NAME }}" -R ${{ github.repository }}
        
    - name: Summary
      run: |
        echo "## Azure Environment Setup Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Environment: **${{ env.ENV_NAME }}**" >> $GITHUB_STEP_SUMMARY
        echo "Region: **${{ env.LOCATION }}**" >> $GITHUB_STEP_SUMMARY
        echo "Resource Group: **${{ env.RESOURCE_GROUP }}**" >> $GITHUB_STEP_SUMMARY
        echo "App Service Plan: **${{ env.APP_SERVICE_PLAN }}**" >> $GITHUB_STEP_SUMMARY
        echo "Web App: **${{ env.APP_NAME }}**" >> $GITHUB_STEP_SUMMARY
        echo "Computer Vision: **imagegc-vision-${{ env.ENV_NAME }}**" >> $GITHUB_STEP_SUMMARY
        echo "Application Insights: **imagegc-insights-${{ env.ENV_NAME }}**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. Set the OpenAI connection details in GitHub Secrets:" >> $GITHUB_STEP_SUMMARY
        echo "   - OPENAI_ENDPOINT" >> $GITHUB_STEP_SUMMARY
        echo "   - OPENAI_KEY" >> $GITHUB_STEP_SUMMARY
        echo "   - OPENAI_CHAT_MODEL (Optional, default: gpt-35-turbo)" >> $GITHUB_STEP_SUMMARY
        echo "   - OPENAI_IMAGE_MODEL (Optional, default: dall-e-3)" >> $GITHUB_STEP_SUMMARY
        echo "   - OPENAI_FALLBACK_MODEL (Optional, default: gpt-35-turbo)" >> $GITHUB_STEP_SUMMARY
        echo "2. Run the CI/CD pipeline to deploy your application" >> $GITHUB_STEP_SUMMARY
