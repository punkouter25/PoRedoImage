name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**/*.md'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Deploy to Azure'
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 9.0.x
    
    - name: Restore dependencies
      run: dotnet restore ImageGc.sln
      working-directory: ./ImageGc
    
    - name: Build
      run: dotnet build ImageGc.sln --configuration Release --no-restore
      working-directory: ./ImageGc
    
    - name: Test
      run: dotnet test ImageGc.sln --configuration Release --no-build --verbosity normal
      working-directory: ./ImageGc
      # Note: This assumes you have test projects in your solution. If not, you can safely keep this step.
    
    - name: Publish
      run: dotnet publish Server/Server.csproj --configuration Release --no-build --output ../publish
      working-directory: ./ImageGc
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: webapp
        path: |
          ./publish
        retention-days: 5
        
  docker-build:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: ./ImageGc
        file: ./ImageGc/Dockerfile
        push: true
        tags: |
          ghcr.io/${{ github.repository_owner }}/imagegc:latest
          ghcr.io/${{ github.repository_owner }}/imagegc:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
  
  security-scan:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 9.0.x
          
      - name: Run dependency vulnerability scan
        run: |
          cd ImageGc
          dotnet list package --vulnerable --include-transitive
          
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: csharp
          
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2
        
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
  
  deploy:
    needs: [docker-build, security-scan]
    runs-on: ubuntu-latest
    if: (github.ref == 'refs/heads/main' && github.event_name != 'pull_request') || (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy == 'true')
    environment: production
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: webapp
        path: ./publish
    
    - name: Login to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
        package: ./publish
