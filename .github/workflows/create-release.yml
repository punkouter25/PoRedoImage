name: Create Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.2.3)'
        required: true
        type: string
      prerelease:
        description: 'Is this a pre-release?'
        required: true
        default: false
        type: boolean
      release_notes:
        description: 'Custom release notes (leave empty to auto-generate)'
        required: false
        type: string

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Validate version format
        run: |
          if ! [[ ${{ github.event.inputs.version }} =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.]+)?$ ]]; then
            echo "::error::Invalid version format. Must follow pattern vX.Y.Z or vX.Y.Z-suffix"
            exit 1
          fi
          
      - name: Check if tag already exists
        run: |
          if git tag | grep -q "^${{ github.event.inputs.version }}$"; then
            echo "::error::Tag ${{ github.event.inputs.version }} already exists"
            exit 1
          fi
          
      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 9.0.x
          
      - name: Build project
        run: |
          cd ImageGc
          dotnet restore
          dotnet build -c Release /p:Version="${{ github.event.inputs.version }}"
          
      - name: Generate release notes
        id: release_notes
        run: |
          if [ -n "${{ github.event.inputs.release_notes }}" ]; then
            echo "${{ github.event.inputs.release_notes }}" > RELEASE_NOTES.md
          else
            # Get latest tag
            LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            
            echo "# Release ${{ github.event.inputs.version }}" > RELEASE_NOTES.md
            echo "" >> RELEASE_NOTES.md
            echo "## Changes" >> RELEASE_NOTES.md
            
            if [ -z "$LATEST_TAG" ]; then
              # First release
              echo "Initial release" >> RELEASE_NOTES.md
            else
              # Format: Type (scope): subject [PR #]
              git log --pretty=format:"- %s" "${LATEST_TAG}..HEAD" | 
                grep -v "Merge pull request" |
                grep -v "Merge branch" |
                sort >> RELEASE_NOTES.md
            fi
            
            echo "" >> RELEASE_NOTES.md
            echo "## Included Commits" >> RELEASE_NOTES.md
            
            if [ -z "$LATEST_TAG" ]; then
              git log --pretty=format:"- %h %s (%an)" -n 10 >> RELEASE_NOTES.md
            else
              git log --pretty=format:"- %h %s (%an)" "${LATEST_TAG}..HEAD" >> RELEASE_NOTES.md
            fi
          fi
          
          cat RELEASE_NOTES.md
          
      - name: Create tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a ${{ github.event.inputs.version }} -m "Release ${{ github.event.inputs.version }}"
          git push origin ${{ github.event.inputs.version }}
          
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.version }}
          name: Release ${{ github.event.inputs.version }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: ${{ github.event.inputs.prerelease }}
          
      - name: Summary
        run: |
          echo "## Release Created" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ github.event.inputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Type:** ${{ github.event.inputs.prerelease == 'true' && 'Pre-release' || 'Stable release' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Release URL:** ${{ steps.create_release.outputs.url }}" >> $GITHUB_STEP_SUMMARY
