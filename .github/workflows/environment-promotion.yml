name: Build and Deploy to Azure Web App

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: staging # Reverted environment name back to staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 9.0.x

      - name: Restore dependencies
        run: dotnet restore ImageGc.sln
        working-directory: ./ImageGc

      - name: Build
        run: dotnet build ImageGc.sln --configuration Release --no-restore
        working-directory: ./ImageGc

      - name: Test
        run: dotnet test ImageGc.sln --configuration Release --no-build --verbosity normal
        working-directory: ./ImageGc

      - name: Publish
        run: dotnet publish Server/Server.csproj --configuration Release --no-build --output ../publish
        working-directory: ./ImageGc

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: imagegc-app # Corrected app name to the existing App Service
          package: ./publish

      - name: Post-deployment health check
        run: |
          echo "Checking health of deployed application"
          APP_URL="https://imagegc-app.azurewebsites.net/health" # Updated health check URL
          RETRY_COUNT=0
          MAX_RETRIES=10

          until curl -s -f "$APP_URL" || [ $RETRY_COUNT -eq $MAX_RETRIES ]
          do
            echo "Waiting for application to become available... ($((RETRY_COUNT+1))/$MAX_RETRIES)"
            sleep 10
            RETRY_COUNT=$((RETRY_COUNT+1))
          done

          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "::error::Application failed to become healthy after deployment"
            exit 1
          else
            echo "Application is healthy!"
          fi

      - name: Create deployment summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Successfully deployed to **Azure Web App**" >> $GITHUB_STEP_SUMMARY
          echo "ðŸ“… Deployment completed at: $(date)" >> $GITHUB_STEP_SUMMARY
