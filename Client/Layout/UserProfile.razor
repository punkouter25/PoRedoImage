@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject IAccessTokenProvider TokenProvider
@inject NavigationManager Navigation

<AuthorizeView>
    <Authorized>
        <div class="dropdown">
            <button @onclick="ToggleUserMenu" class="btn btn-link nav-link dropdown-toggle" id="userMenu" type="button" data-bs-toggle="dropdown" aria-expanded="@_userMenuExpanded">
                <i class="bi bi-person-circle me-1"></i>@context.User.Identity?.Name
            </button>
            <ul class="dropdown-menu @(_userMenuExpanded ? "show" : "")" aria-labelledby="userMenu" style="position: absolute; inset: 0px auto auto 0px; margin: 0px; transform: translate(0px, 40px);">
                <li><span class="dropdown-item-text">Welcome, @GetUserName(context.User.Identity?.Name)</span></li>
                <li><hr class="dropdown-divider"></li>
                <li><button class="dropdown-item" @onclick="BeginLogout">Logout</button></li>
            </ul>
        </div>
    </Authorized>
    <NotAuthorized>
        <a class="nav-link" href="authentication/login">
            <i class="bi bi-box-arrow-in-right me-1"></i>Login
        </a>
    </NotAuthorized>
</AuthorizeView>

@code {
    private bool _userMenuExpanded = false;

    private void ToggleUserMenu()
    {
        _userMenuExpanded = !_userMenuExpanded;
    }

    private void BeginLogout()
    {
        Navigation.NavigateTo("authentication/logout");
    }

    private string GetUserName(string? email)
    {
        if (string.IsNullOrEmpty(email))
            return "User";

        // If the identity name is an email, extract the part before the @ symbol
        if (email.Contains('@'))
            return email.Split('@')[0];

        return email;
    }
}