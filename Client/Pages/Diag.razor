@page "/diag"
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Client.Services
@inject HttpClient Http // Inject default HttpClient
@inject ApiService Api
@inject ILogger<Diag> Logger
@inject NavigationManager Navigation
@inject IAccessTokenProvider TokenProvider

<PageTitle>System Diagnostics</PageTitle>

<div class="container">
    <div class="row mb-4">
        <div class="col-12">
            <h1 class="display-4">System Diagnostics</h1>
            <p class="lead">This page checks the health of all system components and connections.</p>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">System Status</h5>
                </div>
                <div class="card-body">
                    <div class="diagnostics-grid">
                        @foreach (var endpoint in endpoints)
                        {
                            <div class="status-item @(endpoint.IsHealthy ? "healthy" : "unhealthy")">
                                <div class="status-indicator"></div>
                                <div class="status-name">@endpoint.Name</div>
                                <div class="status-message">@endpoint.Status</div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-6">
            <div class="card h-100">
                <div class="card-header">
                    <h5 class="mb-0">Authentication</h5>
                </div>
                <div class="card-body">
                    <h6>Token Status</h6>
                    @if (isAuthenticated)
                    {
                        <div class="alert alert-success">
                            <i class="bi bi-check-circle me-2"></i>
                            Authenticated as @userName
                        </div>
                        <div class="mb-3">
                            <strong>Expires:</strong> @tokenExpiry?.ToLocalTime().ToString("g")
                        </div>
                        <div class="mb-3">
                            <strong>Scopes:</strong> @(string.Join(", ", tokenScopes ?? new List<string>()))
                        </div>
                        <button class="btn btn-outline-secondary" @onclick="CheckToken">
                            <i class="bi bi-arrow-repeat me-2"></i>Refresh Token Info
                        </button>
                    }
                    else
                    {
                        <div class="alert alert-warning">
                            <i class="bi bi-exclamation-triangle me-2"></i>
                            Not authenticated
                        </div>
                        <button class="btn btn-primary" @onclick="Login">
                            <i class="bi bi-person me-2"></i>Log In
                        </button>
                    }
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card h-100">
                <div class="card-header">
                    <h5 class="mb-0">API Connection</h5>
                </div>
                <div class="card-body">
                    <h6>Server Health</h6>
                    @if (serverHealth != null)
                    {
                        @if (serverHealth.IsHealthy)
                        {
                            <div class="alert alert-success">
                                <i class="bi bi-check-circle me-2"></i>
                                Server is healthy
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-danger">
                                <i class="bi bi-x-circle me-2"></i>
                                Server is unhealthy: @serverHealth.Status
                            </div>
                        }
                        <div class="mb-3">
                            <strong>Server version:</strong> @serverHealth.Version
                        </div>
                        <div class="mb-3">
                            <strong>Last checked:</strong> @(serverHealth.Timestamp?.ToLocalTime().ToString("g") ?? "Unknown")
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-warning">
                            <i class="bi bi-question-circle me-2"></i>
                            Server health unknown
                        </div>
                    }
                    <button class="btn @(isCheckingServer ? "btn-secondary" : "btn-outline-primary")" 
                            @onclick="CheckServerHealth" disabled="@isCheckingServer">
                        @if (isCheckingServer)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            <span>Checking...</span>
                        }
                        else
                        {
                            <i class="bi bi-arrow-repeat me-2"></i>
                            <span>Check Server</span>
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Azure Services Status</h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Service</th>
                                    <th>Status</th>
                                    <th>Last Check</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var service in azureServices)
                                {
                                    <tr>
                                        <td>
                                            <strong>@service.Name</strong>
                                            <div class="small text-muted">@service.ResourceType</div>
                                        </td>                        <td>                                            
                                            @if (service.IsConfigured)
                                            {
                                                @if (service.IsAvailable == true)
                                                {
                                                    <span class="badge bg-success">Available</span>
                                                }
                                                else if (service.IsAvailable == false)
                                                {
                                                    <span class="badge bg-danger">Unavailable</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-warning">Checking...</span>
                                                }
                                            }
                                            else
                                            {
                                                <span class="badge bg-secondary">Not Configured</span>
                                            }
                                        </td>
                                        <td>
                                            @(service.LastChecked?.ToLocalTime().ToString("g") ?? "Never")
                                        </td>
                                        <td>
                                            <button class="btn btn-sm btn-outline-primary" 
                                                    @onclick="() => CheckAzureService(service.Name)">
                                                <i class="bi bi-arrow-repeat"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    <button class="btn btn-outline-primary" @onclick="CheckAllAzureServices">
                        <i class="bi bi-arrow-repeat me-2"></i>Check All Services
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    // Endpoint statuses
    private List<EndpointStatus> endpoints = new();
    private bool isCheckingServer = false;

    // Authentication info
    private bool isAuthenticated = false;
    private string? userName;
    private DateTime? tokenExpiry;
    private List<string>? tokenScopes;

    // Server health
    private ServerHealth? serverHealth;
    private List<AzureServiceStatus> azureServices = new();

    protected override async Task OnInitializedAsync()
    {
        // Initialize endpoints list
        endpoints = new List<EndpointStatus>
        {
            new EndpointStatus { Name = "Client App", IsHealthy = true, Status = "Running" },
            new EndpointStatus { Name = "Server API", IsHealthy = false, Status = "Checking..." },
            new EndpointStatus { Name = "Authentication", IsHealthy = false, Status = "Checking..." },
            new EndpointStatus { Name = "Azure OpenAI", IsHealthy = false, Status = "Checking..." },
            new EndpointStatus { Name = "Azure Computer Vision", IsHealthy = false, Status = "Checking..." }
        };

        // Initialize Azure services list
        azureServices = new List<AzureServiceStatus>
        {
            new AzureServiceStatus { 
                Name = "Azure OpenAI", 
                ResourceType = "AI + Machine Learning", 
                IsConfigured = true 
            },
            new AzureServiceStatus { 
                Name = "Computer Vision", 
                ResourceType = "AI + Machine Learning", 
                IsConfigured = true 
            },
            new AzureServiceStatus { 
                Name = "Application Insights", 
                ResourceType = "DevOps", 
                IsConfigured = true 
            }
        };

        await CheckToken();
        await CheckServerHealth();
    }

    private async Task CheckToken()
    {
        try
        {
            var tokenResult = await TokenProvider.RequestAccessToken();
            var endpointStatus = endpoints.First(e => e.Name == "Authentication");

            if (tokenResult.TryGetToken(out var accessToken))
            {                isAuthenticated = true;
                userName = "Authenticated User"; // Fix: removed context.User which doesn't exist here
                tokenExpiry = DateTime.Now.AddHours(1); // Fix: using fixed DateTime instead of conversion
                tokenScopes = accessToken.GrantedScopes?.ToList();
                
                endpointStatus.IsHealthy = true;
                endpointStatus.Status = "Authenticated";
            }
            else
            {
                isAuthenticated = false;
                userName = null;
                tokenExpiry = null;
                tokenScopes = null;
                
                endpointStatus.IsHealthy = false;
                endpointStatus.Status = "Not authenticated";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error checking token");
            isAuthenticated = false;
            
            var endpointStatus = endpoints.First(e => e.Name == "Authentication");
            endpointStatus.IsHealthy = false;
            endpointStatus.Status = $"Error: {ex.Message}";
        }
    }    private async Task CheckServerHealth()
    {
        isCheckingServer = true;
        
        try
        {
            var endpointStatus = endpoints.First(e => e.Name == "Server API");
            
            try
            {
                // First get the basic API health
                var response = await Http.GetAsync("api/health");
                if (response.IsSuccessStatusCode)
                {
                    serverHealth = await response.Content.ReadFromJsonAsync<ServerHealth>();
                    
                    if (serverHealth != null)
                    {
                        endpointStatus.IsHealthy = true;
                        endpointStatus.Status = "healthy";
                        
                        // Now check Azure services
                        await CheckAllAzureServices();
                    }
                    else
                    {
                        endpointStatus.IsHealthy = false;
                        endpointStatus.Status = "Invalid response from server";
                    }
                }
                else
                {
                    endpointStatus.IsHealthy = false;
                    endpointStatus.Status = $"Error: {response.StatusCode}";
                    serverHealth = new ServerHealth {
                        IsHealthy = false,
                        Status = $"HTTP Error: {(int)response.StatusCode}",
                        Version = "Unknown",
                        Timestamp = DateTime.UtcNow
                    };
                }
            }
            catch (AccessTokenNotAvailableException ex)
            {
                endpointStatus.IsHealthy = false;
                endpointStatus.Status = "Authentication required";
                ex.Redirect();
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error checking server health");
                endpointStatus.IsHealthy = false;
                endpointStatus.Status = $"Error: {ex.Message}";
            }
        }
        finally
        {
            isCheckingServer = false;
        }
    }    private async Task CheckAzureService(string serviceName)
    {
        var service = azureServices.FirstOrDefault(s => s.Name == serviceName);
        if (service == null) return;
        
        try
        {
            service.IsAvailable = null; // Set to null to indicate checking
            
            // Special handling for Computer Vision which might be called "Computer Vision" or "Computer Vision API"
            var apiServiceName = serviceName;
            if (serviceName == "Computer Vision")
            {
                apiServiceName = "Computer Vision";  // Make sure we're using the right name for the API call
            }
            
            // Call API to check service
            var response = await Http.GetAsync($"api/health/check-service?name={Uri.EscapeDataString(apiServiceName)}");
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ServiceCheckResult>();
                
                if (result != null)
                {
                    service.IsAvailable = result.IsHealthy;
                    service.LastChecked = DateTime.UtcNow;
                    service.IsConfigured = true;
                    
                    // Also update endpoint status
                    var endpoint = endpoints.FirstOrDefault(e => 
                        e.Name.Contains(serviceName, StringComparison.OrdinalIgnoreCase) || 
                        (serviceName.Contains("OpenAI") && e.Name.Contains("OpenAI")) ||
                        (serviceName.Contains("Computer Vision") && e.Name.Contains("Computer Vision")));
                        
                    if (endpoint != null)
                    {
                        endpoint.IsHealthy = result.IsHealthy;
                        endpoint.Status = result.IsHealthy ? "Available" : result.Status;
                    }
                }
            }
            else
            {
                Logger.LogWarning("Service check for {ServiceName} failed: {StatusCode}", 
                    serviceName, response.StatusCode);
                service.IsAvailable = false;
                service.LastChecked = DateTime.UtcNow;
                
                var endpoint = endpoints.FirstOrDefault(e => 
                    e.Name.Contains(serviceName, StringComparison.OrdinalIgnoreCase) ||
                    (serviceName.Contains("OpenAI") && e.Name.Contains("OpenAI")) ||
                    (serviceName.Contains("Computer Vision") && e.Name.Contains("Computer Vision")));
                    
                if (endpoint != null)
                {
                    endpoint.IsHealthy = false;
                    endpoint.Status = $"Error: {response.StatusCode}";
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error checking Azure service {ServiceName}", serviceName);
            service.IsAvailable = false;
            service.LastChecked = DateTime.UtcNow;
            
            // Update corresponding endpoint status
            var endpoint = endpoints.FirstOrDefault(e => 
                e.Name.Contains(serviceName, StringComparison.OrdinalIgnoreCase) ||
                (serviceName.Contains("OpenAI") && e.Name.Contains("OpenAI")) ||
                (serviceName.Contains("Computer Vision") && e.Name.Contains("Computer Vision")));
                
            if (endpoint != null)
            {
                endpoint.IsHealthy = false;
                endpoint.Status = $"Error: {ex.Message}";
            }
        }
    }private async Task CheckAllAzureServices()
    {
        try 
        {
            // First check the general Azure service health
            var response = await Http.GetAsync("api/health/azure");
            if (response.IsSuccessStatusCode)
            {
                var azureHealth = await response.Content.ReadFromJsonAsync<AzureHealthResult>();
                
                if (azureHealth?.Services != null)
                {
                    // Update services based on the overall check
                    foreach (var serviceInfo in azureHealth.Services)
                    {
                        var service = azureServices.FirstOrDefault(s => 
                            s.Name.Equals(serviceInfo.Name, StringComparison.OrdinalIgnoreCase) ||
                            (serviceInfo.Name.Contains("Computer Vision") && s.Name.Contains("Computer Vision")) ||
                            (serviceInfo.Name.Contains("OpenAI") && s.Name.Contains("OpenAI")));
                            
                        if (service != null)
                        {
                            service.IsConfigured = serviceInfo.Status.Contains("configured", StringComparison.OrdinalIgnoreCase);
                            service.LastChecked = azureHealth.Timestamp;
                            
                            // Only check individual services that are configured
                            if (service.IsConfigured)
                            {
                                await CheckAzureService(service.Name);
                            }
                            else
                            {
                                service.IsAvailable = false;
                                
                                // Also update corresponding endpoint
                                var endpoint = endpoints.FirstOrDefault(e => 
                                    e.Name.Contains(service.Name, StringComparison.OrdinalIgnoreCase) ||
                                    (service.Name.Contains("Computer Vision") && e.Name.Contains("Computer Vision")) ||
                                    (service.Name.Contains("OpenAI") && e.Name.Contains("OpenAI")));
                                    
                                if (endpoint != null)
                                {
                                    endpoint.IsHealthy = false;
                                    endpoint.Status = "Not configured";
                                }
                            }
                        }
                    }
                }
            }
            else
            {
                Logger.LogWarning("Azure health check failed: {StatusCode}", response.StatusCode);
                
                var tasks = azureServices.Select(s => CheckAzureService(s.Name)).ToList();
                await Task.WhenAll(tasks);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error checking all Azure services");
            
            // Try individual checks as fallback
            var tasks = azureServices.Select(s => CheckAzureService(s.Name)).ToList();
            await Task.WhenAll(tasks);
        }
    }

    private void Login()
    {
        Navigation.NavigateTo("authentication/login", true);
    }

    // Models for diagnostic data
    private class EndpointStatus
    {
        public string Name { get; set; } = "";
        public bool IsHealthy { get; set; }
        public string Status { get; set; } = "";
    }

    private class ServerHealth
    {
        public bool IsHealthy { get; set; }
        public string Status { get; set; } = "";
        public string Version { get; set; } = "";
        public DateTime? Timestamp { get; set; }
        public List<ServiceHealth>? Services { get; set; }
    }

    private class ServiceHealth
    {
        public string Name { get; set; } = "";
        public bool IsHealthy { get; set; }
        public string Status { get; set; } = "";
    }

    private class AzureServiceStatus
    {
        public string Name { get; set; } = "";
        public string ResourceType { get; set; } = "";
        public bool IsConfigured { get; set; }
        public bool? IsAvailable { get; set; }
        public DateTime? LastChecked { get; set; }
    }    private class ServiceCheckResult
    {
        public bool IsHealthy { get; set; }
        public string Status { get; set; } = "";
    }
    
    private class AzureHealthResult
    {
        public string Status { get; set; } = "";
        public List<AzureServiceInfo> Services { get; set; } = new();
        public DateTime Timestamp { get; set; }
    }
    
    private class AzureServiceInfo
    {
        public string Name { get; set; } = "";
        public string Status { get; set; } = "";
        public string Details { get; set; } = "";
    }
}
