@page "/"
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components
@using System.Text.Json
@using ImageGc.Shared.Models
@using Client.Services
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject ApiService Api
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject ILogger<Home> Logger
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Image Translation & Regeneration</PageTitle>

<div class="container">
    <div class="row mb-4">
        <div class="col-12">
            <h1 class="display-4 text-center">Image Translation & Regeneration</h1>
            <p class="lead text-center">Upload an image to our advanced AI analysis engine, which will generate a comprehensive and detailed description of the visual elements present in your photograph. Then watch as our AI regenerates a new interpretation of your image based on that description, showcasing the fascinating capabilities of computer vision and generative AI working in tandem. This process demonstrates how machines understand and recreate visual content through textual descriptions, highlighting both the strengths and creative interpretations that emerge in AI-powered image processing workflows.</p>
        </div>
    </div>

    @if (!isProcessing && !isComplete)
    {
        <div class="row justify-content-center mb-4">
            <div class="col-md-8">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">Upload Image</h5>
                    </div>
                    <div class="card-body">
                        <InputFile OnChange="@LoadFile" class="form-control mb-3" accept=".jpg,.jpeg,.png" />
                        
                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger">
                                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                                @errorMessage
                            </div>
                        }
                        
                        @if (imagePreviewUrl != null)
                        {
                            <div class="text-center mb-3">
                                <img src="@imagePreviewUrl" class="img-fluid preview-image" alt="Preview" />
                            </div>
                        }
                          <div class="mb-3">
                            <label for="descriptionLength" class="form-label">
                                Description Length: <strong>@descriptionLength words</strong>
                                <span class="text-muted small fst-italic d-block">Longer descriptions (350+ words) generally produce better results</span>
                            </label>
                            <input type="range" class="form-range" min="200" max="500" step="10" 
                                  @bind="descriptionLength" id="descriptionLength" />
                        </div>
                        
                        <button class="btn btn-primary w-100" @onclick="ProcessImage" disabled="@(!canProcessImage)">
                            <i class="bi bi-cpu me-2"></i>Process Image
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }
    
    @if (isProcessing)
    {
        <div class="row justify-content-center mb-4">
            <div class="col-md-8">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">Processing...</h5>
                    </div>
                    <div class="card-body">
                        <div class="progress mb-3">
                            <div class="progress-bar progress-bar-striped progress-bar-animated" 
                                 role="progressbar" style="width: @(progressPercentage)%" 
                                 aria-valuenow="@progressPercentage" aria-valuemin="0" aria-valuemax="100">
                                @progressPercentage%
                            </div>
                        </div>
                        <p class="text-center">@progressMessage</p>
                    </div>
                </div>
            </div>
        </div>
    }
    
    @if (isComplete)
    {
        <div class="row mb-4">
            <div class="col-md-6">
                <div class="card h-100">
                    <div class="card-header">
                        <h5 class="mb-0">Original Image</h5>
                    </div>
                    <div class="card-body d-flex flex-column">
                        <div class="text-center mb-3 flex-grow-1">
                            <img src="@imagePreviewUrl" class="img-fluid result-image" alt="Original" 
                                 onload="this.classList.add('loaded')" />
                        </div>
                        <button class="btn btn-outline-primary" @onclick="DownloadOriginal">
                            <i class="bi bi-download me-2"></i>Download Original
                        </button>
                    </div>
                </div>
            </div>
            
            <div class="col-md-6">
                <div class="card h-100">
                    <div class="card-header">
                        <h5 class="mb-0">Regenerated Image</h5>
                    </div>
                    <div class="card-body d-flex flex-column">
                        <div class="text-center mb-3 flex-grow-1">
                            @if (regeneratedImageUrl != null)
                            {                                <img src="@regeneratedImageUrl" class="img-fluid result-image" alt="Regenerated" 
                                     onload="this.classList.add('loaded')" 
                                     onerror="this.onerror=null; this.src='images/image-error.png'; this.classList.add('error'); console.error('Failed to load regenerated image');" />
                            }
                            else
                            {                                <div class="d-flex justify-content-center align-items-center h-100 flex-column">
                                    <div class="spinner-border text-primary mb-2" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                    <p class="text-muted mb-1">Image generation in progress...</p>
                                    <p class="text-muted small fst-italic">This process typically takes 45-90 seconds. Complex images may take longer.</p>
                                    <p class="text-muted small">Your browser will automatically display the image when ready.</p>
                                </div>
                            }
                        </div>
                        @if (regeneratedImageUrl != null)
                        {
                            <button class="btn btn-outline-primary" @onclick="DownloadRegenerated">
                                <i class="bi bi-download me-2"></i>Download Regenerated
                            </button>
                        }
                    </div>
                </div>
            </div>
        </div>
        
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Image Description</h5>
                        @if (analysisResult?.Metrics != null)
                        {
                            <span class="badge bg-info text-dark">
                                Processing time: @(analysisResult.Metrics.TotalProcessingTimeMs / 1000.0)s
                            </span>
                        }
                    </div>                    <div class="card-body">
                        <p class="description-text">@((MarkupString)(string.IsNullOrEmpty(imageDescription) ? "" : System.Net.WebUtility.HtmlEncode(imageDescription).Replace("\n", "<br />")))</p>
                        <div class="d-flex justify-content-between align-items-center">
                            <span class="text-muted">@(string.IsNullOrEmpty(imageDescription) ? 0 : imageDescription.Split(' ').Length) words</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="row mb-4">
            <div class="col-12 d-flex justify-content-between">
                <button class="btn btn-primary" @onclick="DownloadSideBySide">
                    <i class="bi bi-download me-2"></i>Download Side-by-Side Comparison
                </button>
                <button class="btn btn-outline-primary" @onclick="StartOver">
                    <i class="bi bi-arrow-repeat me-2"></i>Start New
                </button>
            </div>
        </div>
    }
</div>

@code {
    private IBrowserFile? selectedFile;
    private string? imagePreviewUrl;
    private string? regeneratedImageUrl;
    private string? imageDescription;
    private string? errorMessage;
    private bool isProcessing = false;
    private bool isComplete = false;    private bool canProcessImage => selectedFile != null && string.IsNullOrEmpty(errorMessage);
    private int progressPercentage = 0;
    private string progressMessage = "";
    private int descriptionLength = 350; // Default to 350 words for better image generation results
    private const int MaxFileSize = 20 * 1024 * 1024; // 20MB
    private ImageAnalysisResult? analysisResult;
    private string? userId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? "anonymous";
    }
    
    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        try
        {
            selectedFile = e.File;
            errorMessage = null;
            
            // Validate file type
            var fileType = Path.GetExtension(selectedFile.Name).ToLower();
            if (fileType != ".jpg" && fileType != ".jpeg" && fileType != ".png")
            {
                errorMessage = "Only JPG and PNG files are supported.";
                selectedFile = null;
                return;
            }
            
            // Validate file size
            if (selectedFile.Size > MaxFileSize)
            {
                errorMessage = $"File size exceeds the maximum allowed (20MB). Current size: {Math.Round(selectedFile.Size / 1024.0 / 1024.0, 2)}MB";
                selectedFile = null;
                return;
            }
            
            // Create preview
            var imageStream = selectedFile.OpenReadStream(MaxFileSize);
            var buffer = new byte[selectedFile.Size];
            await imageStream.ReadAsync(buffer);
            
            var base64Image = Convert.ToBase64String(buffer);
            var fileType2 = selectedFile.ContentType;
            imagePreviewUrl = $"data:{fileType2};base64,{base64Image}";
            
            Logger.LogInformation("Image loaded successfully: {FileName}, {FileSize}KB", 
                selectedFile.Name, Math.Round(selectedFile.Size / 1024.0, 2));
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading image: {ex.Message}";
            Logger.LogError(ex, "Error loading image");
        }
    }
    
    private async Task ProcessImage()
    {
        if (selectedFile == null || imagePreviewUrl == null) return;
        
        try
        {
            isProcessing = true;
            errorMessage = null;
            
            // Step 1: Prepare the request (progress update sent from server)
            // await UpdateProgress(10, "Preparing image for analysis..."); // Progress now sent from server
            
            // Create the request model
            var request = new ImageAnalysisRequest
            {
                ImageData = imagePreviewUrl,
                ContentType = selectedFile.ContentType,
                FileName = selectedFile.Name,
                DescriptionLength = descriptionLength
            };
            
            // Step 2: Send to API with authenticated service (progress updates sent from server)
            // await UpdateProgress(30, "Analyzing image with Azure Computer Vision..."); // Progress now sent from server
            try
            {
                // Create a cancellation token with extended timeout (3 minutes)
                using var cts = new CancellationTokenSource(TimeSpan.FromMinutes(3));
                
                // Call the API using authenticated service with timeout
                analysisResult = await Api.PostAsync<ImageAnalysisRequest, ImageAnalysisResult>(
                    "api/ImageAnalysis/analyze", request);
                
                if (analysisResult == null)
                {
                    throw new Exception("Failed to process image analysis. No response received from API.");
                }
                
                // Update UI based on the final result received from the API
                imageDescription = analysisResult.Description;
                if (!string.IsNullOrEmpty(analysisResult.RegeneratedImageData))
                {
                    regeneratedImageUrl = $"data:{analysisResult.RegeneratedImageContentType};base64,{analysisResult.RegeneratedImageData}";
                }
            }
            catch (TimeoutException ex)
            {
                Logger.LogError(ex, "Request timed out");
                errorMessage = "The image generation process took too long to complete. Please try again with a different image.";
                imageDescription = "Image analysis timed out. The server took too long to process your request. This might be due to high server load or complexity of the image.";
            }
            catch (HttpRequestException ex) when ((int?)ex.StatusCode >= 500)
            {
                Logger.LogError(ex, "Server error occurred");
                errorMessage = $"A server error occurred: {ex.Message}";
                imageDescription = "The server encountered an error while processing your image. Our team has been notified and is working to resolve the issue.";
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error calling API");
                errorMessage = $"Error processing image: {ex.Message}";
                
                // Provide more user-friendly error messages based on type of error
                if (ex.Message.Contains("timeout") || ex.Message.Contains("timed out"))
                {
                    imageDescription = "The request took too long to complete. This could be due to high server load or complexity of the image. Please try again with a different image or at a later time.";
                }
                else if (ex.Message.Contains("connection"))
                {
                    imageDescription = "There was a problem connecting to the server. Please check your internet connection and try again.";
                }
                else
                {
                    imageDescription = "An unexpected error occurred during processing. Our team has been notified of the issue.";
                }
            }
            finally
            {
                // await UpdateProgress(100, "Processing complete!"); // Final progress sent from server
                isProcessing = false;
                isComplete = true;
                StateHasChanged(); // Ensure UI updates after processing
                Logger.LogInformation("Image processing completed successfully");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error processing image: {ex.Message}";
            isProcessing = false;
            Logger.LogError(ex, "Error processing image");
        }
    }
    
    // Remove client-side UpdateProgress as updates come from SignalR
    // private async Task UpdateProgress(int percentage, string message)
    // {
    //     progressPercentage = percentage;
    //     progressMessage = message;
    //     Logger.LogInformation("Progress update: {Percentage}% - {Message}", percentage, message);
    //     await Task.Delay(100); // Allow UI to update
    // }
    
    private async Task CopyToClipboard(string? text) // Changed to nullable string
    {
        if (string.IsNullOrEmpty(text)) return;
        
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
        Logger.LogInformation("Description copied to clipboard");
    }
    
    private async Task DownloadOriginal()
    {
        if (imagePreviewUrl == null) return;
        
        try
        {
            var success = await JSRuntime.InvokeAsync<bool>("downloadImage", imagePreviewUrl, 
                selectedFile?.Name ?? "original-image.jpg");
                
            if (success)
            {
                Logger.LogInformation("Original image download initiated");
            }
            else
            {
                errorMessage = "There was a problem downloading the image. Please try again.";
                Logger.LogWarning("Download function returned false");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error downloading original image: {ex.Message}";
            Logger.LogError(ex, "Error downloading original image");
        }
    }
    
    private async Task DownloadRegenerated()
    {
        if (regeneratedImageUrl == null) return;
        
        try
        {
            var success = await JSRuntime.InvokeAsync<bool>("downloadImage", regeneratedImageUrl, 
                "regenerated-" + (selectedFile?.Name ?? "image.png"));
                
            if (success)
            {
                Logger.LogInformation("Regenerated image download initiated");
            }
            else
            {
                errorMessage = "There was a problem downloading the regenerated image. Please try again.";
                Logger.LogWarning("Download function returned false");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error downloading regenerated image: {ex.Message}";
            Logger.LogError(ex, "Error downloading regenerated image");
        }
    }
    
    private async Task DownloadSideBySide()
    {
        if (imagePreviewUrl == null || regeneratedImageUrl == null) return;
        
        try
        {
            // Show a temporary processing message
            errorMessage = "Generating comparison image...";
            
            await JSRuntime.InvokeVoidAsync("createSideBySideComparison", 
                imagePreviewUrl, regeneratedImageUrl, 
                "comparison-" + (selectedFile?.Name ?? "image.png"));
                
            // Clear the temporary message
            errorMessage = null;
            
            Logger.LogInformation("Side-by-side comparison download initiated");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error creating comparison image: {ex.Message}";
            Logger.LogError(ex, "Error creating comparison image");
        }
    }
    
    private void StartOver()
    {
        selectedFile = null;
        imagePreviewUrl = null;
        regeneratedImageUrl = null;
        imageDescription = null;
        errorMessage = null;
        isProcessing = false;
        isComplete = false;
        progressPercentage = 0;
        progressMessage = "";
        analysisResult = null;
        
        Logger.LogInformation("Process reset - starting over");
    }
    
    private void RedirectToLogin()
    {
        NavigationManager.NavigateTo("authentication/login", true);
    }
}
